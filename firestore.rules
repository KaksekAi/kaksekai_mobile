rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.keys().hasAll(['fullName', 'email', 'createdAt', 'lastLogin', 'isActive'])
        && request.resource.data.email is string
        && request.resource.data.fullName is string
        && request.resource.data.createdAt is timestamp
        && request.resource.data.lastLogin is timestamp
        && request.resource.data.isActive is bool;
      allow update: if isOwner(userId)
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['fullName', 'photoURL', 'lastLogin', 'isActive']);
      allow delete: if false; // Prevent user deletion through client SDK
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 